#include "manager.h"Manager::Manager(){}Manager::Manager(string name, string pwd){    this->m_Name = name;    this->m_Pwd = pwd;    this->initVector();    ifstream ifs;    ifs.open(COMPUTER_FILE, ios::in);    ComputerRoom com;    while (ifs >> com.m_ComId && ifs >> com.m_MaxNum)    {        vCom.push_back(com);    }    ifs.close();}//submenu of managervoid Manager::operMenu(){    cout << "Welcome administrator: " << this->m_Name << "log in" << endl;    cout << "\t\t ---------------------------------\n";    cout << "\t\t|                                |\n";    cout << "\t\t|          1.add account         |\n";    cout << "\t\t|                                |\n";    cout << "\t\t|          2.view account        |\n";    cout << "\t\t|                                |\n";    cout << "\t\t|          3.view computer room  |\n";    cout << "\t\t|                                |\n";    cout << "\t\t|          4.clear reservation   |\n";    cout << "\t\t|                                |\n";    cout << "\t\t|          0.log off             |\n";    cout << "\t\t|                                |\n";    cout << "\t\t ---------------------------------\n";    cout << "input your choice: " << endl;}void Manager::addPerson(){    cout << "input the account type" << endl;    cout << "1. student" << endl;    cout << "2. teacher" << endl;    string fileName;    string tip;    string errorTip;  //repeated error remind    ofstream ofs;    int select = 0;    cin >> select;    if (select == 1)    {        fileName = STUDENT_FILE;        tip = "input student id: ";        errorTip = "duplicate id, please input again";    }    else    {        fileName = TEACHER_FILE;        tip = "input teacher id";        errorTip = "duplicate id, please input again";    }    //open file    ofs.open(fileName, ios::out | ios::app);    int id;    string name;    string pwd;    cout << tip << endl;    while (true)  //check the duplication    {        cin >> id;        bool ret = checkRepeat(id, select);        if (ret)   //depulication exit        {            cout << errorTip << endl;        }        else        {            break;        }    }    cout << "input your name " << endl;    cin >> name;    cout << "input your password" << endl;    cin >> pwd;    ofs << id << " " << name << " " << pwd << " " << endl;    cout << "add successfully" << endl;    ofs.close();    this->initVector();}void printStudent(Student & s){    cout << "student id: " << s.m_Id << " student name:  " << s.m_Name << " password: " << s.m_Pwd << endl;}void printTeacher(Teacher & s){    cout << " teacher id: " << s.m_EmpId << " teacher name: " << s.m_Name << " password: " << s.m_Pwd << endl;}void Manager::showPerson(){    cout << "select type of view" << endl;    cout << "1. student" << endl;    cout << "2. teacher" << endl;    int select = 0; //接受用户选择    cin >> select;    if (select == 1)    {        cout << "All the students information: " << endl;        for_each(vStu.begin(), vStu.end(), printStudent);    }    else    {        cout << "All the teachers information: " << endl;        for_each(vTea.begin(), vTea.end(), printTeacher);    }}// show the computer room informationvoid Manager::showComputer(){    cout << " situation of computer room: " << endl;    for (vector<ComputerRoom>::iterator it = vCom.begin(); it != vCom.end();it++)    {        cout << "computer room number: " << it->m_ComId << " Maximum capacity of computer room " << it->m_MaxNum << endl;    }}void Manager::cleanFile(){    ofstream ofs(ORDER_FILE, ios::trunc);   //open file by method of trunc    ofs.close();    cout << " clear successfully! " << endl;}void Manager::initVector(){    //clear file    vStu.clear();    vTea.clear();    //read student file    ifstream ifs;    ifs.open(STUDENT_FILE, ios::in);    if (!ifs.is_open())    {        cout << "File read failure" << endl;        return;    }    //get student information    Student s;    while (ifs >> s.m_Id && ifs >> s.m_Name && ifs >> s.m_Pwd)    {        vStu.push_back(s);    }//    cout << "Num of students: " << vStu.size() << endl;    ifs.close();   // init the student    //read teacher file    ifs.open(TEACHER_FILE, ios::in);    Teacher t;    while (ifs >> t.m_EmpId && ifs >> t.m_Name && ifs >>t.m_Pwd)    {        vTea.push_back(t);    }    ifs.close();    //init}bool Manager::checkRepeat(int id, int type){    if (type == 1)   //check student    {        for (vector<Student>::iterator it = vStu.begin(); it != vStu.end(); it++)        {            if (id == it->m_Id)            {                return true;            }        }    }    else    {        //check teacher        for (vector<Teacher>::iterator it = vTea.begin(); it != vTea.end(); it++)        {            if (id == it->m_EmpId)            {                return true;            }        }    }    return false;}